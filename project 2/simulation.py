# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1isWsRMp2517zNRKYNyZfRmFFrK3xc-rN
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from IPython.core.pylabtools import figsize
results = []
sampleCount = 10000
for rollNumber in range(1, sampleCount):
    rolls = np.random.randint(low=1,high=7, size = rollNumber)
    rollsMean = rolls.mean()
    results.append(rollsMean)
	
df = pd.DataFrame({ 'rolls' : results})
figsize(11, 9)
df.plot(title='Law of Large Numbers Graphical Representation')
plt.yticks([1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6])
plt.axhline(3.5, color='r', linestyle='dashed', linewidth=1)
plt.xlabel("Number of die rolls in sample")
plt.ylabel("Average Of Sample")
plt.show()

import matplotlib.pyplot as plt
import random
import statistics 
import seaborn as sns
from scipy import stats

biasedRoll = [1,2,3,4,4,4,5,6,6,6]

def experiment(sampleSize, experimentCount):
  rvList = []
  for j in range(0, experimentCount):
    mean = 0
    for i in range(0, sampleSize):
       x = random.choice(biasedRoll)
       y = random.choice(biasedRoll)
       mean = mean + (x * y)
    mean = mean / sampleSize
    rvList.append(mean)

  plt.hist(rvList, density=True, bins = 36)
  plt.xlabel('Random Variable')
  plt.ylabel('Occurrance')
  plt.title(("Sample Size: " , sampleSize , "   Sample Count: " , experimentCount))
  
  mu = np.array(rvList).mean()
  sigma =  statistics.stdev(rvList)
  x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)
  plt.plot(x, stats.norm.pdf(x, mu, sigma))
  plt.show()


rvList = []
rollNumber = 10000

for i in range(0,rollNumber):
     x = random.choice(biasedRoll)
     rvList.append(x)

rvRange = range(min(rvList), max(rvList) + 2)
plt.hist(rvList, bins=rvRange, rwidth=0.5, align="left")
plt.xlabel('Random Variable')
plt.ylabel('Number of Occurrance')
plt.show()

experiment(10, 10)
experiment(10, 100)
experiment(10, 1000)
experiment(10, 10000)
experiment(10, 100000)

